{"version":3,"sources":["layers/Classes/CartoMVTRequest.js","layers/Config/queries.js","layers/Config/config.js","components/Sidebar/index.jsx","map/index.js","layers/Hooks/useCartoTiles.js","index.js"],"names":["CartoMVTRequest","definition","this","cartoAccount","cartoMapsKey","id","sql","getGeoJSON","aggregationConfig","mapConfig","buffersize","mvt","layers","type","options","aggregation","undefined","fetch","method","headers","body","JSON","stringify","response","json","layergroup","metadata","tilejson","vector","tiles","carto_account","carto_maps_key","request_id","sql_query","aggregation_config","query","Sidebar","mapObject","React","useState","data","setData","formatNumber","value","Intl","NumberFormat","format","fetchData","endpoint","a","manageData","bounds","getBounds","test","_ne","lng","lat","_sw","queries","covid","workersFlow","viewportFeaturesEndpoint","Promise","all","then","responses","covidData","rows","workersFlowData","total","last_14_days","workers","catch","error","console","log","useEffect","on","off","className","COLOR_SCALE","scaleThreshold","domain","Number","MAX_SAFE_INTEGER","range","LINE_COLOR_SCALE","LINE_WIDTH","MapboxMap","config","useRef","latitude","longitude","zoom","maxZoom","pitch","bearing","viewState","setViewState","hoveredObject","setHovered","layersConfig","setLayers","getTiles","infected","CONFIG","QUERY","infected_source","workers_source","useCartoTiles","mapboxgl","supported","alert","Object","values","map","layer","index","MVTLayer","minZoom","lineWidthMinPixels","pickable","autoHighlight","highlightColor","onHover","x","y","object","field","label","hoveredFeature","getLineWidth","f","properties","getLineColor","lineJointRounded","getFillColor","onViewStateChange","controller","reuseMaps","mapStyle","preventStyleDiffing","mapboxApiAccessToken","ref","style","left","top","renderTooltip","current","getMap","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5d23f5ec.chunk.js","sourcesContent":["class CartoMVTRequest {\n    constructor(definition) {\n      this.cartoAccount = definition.cartoAccount;\n      this.cartoMapsKey = definition.cartoMapsKey;\n      this.id = definition.id;\n      this.sql = definition.sql;\n      this.getGeoJSON = definition.getGeoJSON;\n      this.aggregationConfig = definition.aggregationConfig;\n    }\n  \n    async getTiles() {\n      const mapConfig = {\n        buffersize: { mvt: 1 },\n        layers: [\n          {\n            id: this.id,\n            type: 'mapnik',\n            options: {\n              sql: this.sql,\n              aggregation: this.aggregationConfig || undefined,\n              id: 'cartodb_id'\n            }\n          }\n        ]\n      };\n  \n      const response = await fetch(\n        `https://${this.cartoAccount}.carto.com/api/v1/map${\n          this.cartoMapsKey ? `?api_key=${this.cartoMapsKey}` : ''\n        }`,\n        {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(mapConfig)\n        }\n      );\n  \n      const layergroup = await response.json();\n  \n      return layergroup.metadata.tilejson.vector.tiles;\n    }\n  \n    get requestInfo() {\n      return {\n        carto_account: this.cartoAccount,\n        carto_maps_key: this.cartoMapsKey,\n        request_id: this.id,\n        sql_query: this.sql,\n        aggregation_config: this.aggregationConfig || undefined\n      };\n    }\n  \n    set updateSql(query) {\n      this.sql = query;\n    }\n  }\n  \n  export default CartoMVTRequest;\n  ","export default {\n    infected: 'SELECT * FROM covid',\n    workers: `SELECT cartodb_id, workers, ST_Transform(ST_MakeLine(the_geom, ST_GeomFromText(destination_centroid, 4326)), 3857) as the_geom_webmercator FROM workers_flow WHERE workers > 100 ORDER BY workers DESC`\n};\n","export default {\n  mapsKey: 'csEENa_5uea21ar7wwUKTA',\n\n  dotgisUser: 'dotgis',\n  dotgisMapsKey: 'wqTxcWJUw09P4IzpBo4kfg',\n\n  infectedId: 'infected_id',\n  infecetedSourceId: 'infected_source_id',\n  infecetedSourceLayer: 'infected_source_layer',\n\n  workersId: 'workers_id',\n  workersSourceId: 'workers_source_id',\n  workersSourceLayer: 'workers_source_layer',\n};\n  ","import React from 'react';\nimport './style.scss';\n\nconst Sidebar = ({ mapObject }) => {\n\n    const [data, setData] = React.useState({});\n\n    const formatNumber = value => new Intl.NumberFormat('es').format(value);\n\n    const fetchData = async endpoint => {\n        const response = await fetch(endpoint);\n        return await response.json(); \n    };\n\n    const manageData = () => {\n        const bounds = mapObject.getBounds();\n        const test = [bounds._ne.lng, bounds._ne.lat, bounds._sw.lng, bounds._sw.lat];\n    \n        const queries = {\n            covid: `SELECT * FROM viewportfeatures(${[...test]})`,\n            workersFlow: `SELECT * FROM viewportfeaturescodvidworkersflow(${[...test]})`\n        }\n\n        const viewportFeaturesEndpoint = query => `https://dotgis.carto.com/api/v2/sql?q=${query}&api_key=csEENa_5uea21ar7wwUKTA`;\n\n        Promise.all([fetchData(viewportFeaturesEndpoint(queries.covid)), fetchData(viewportFeaturesEndpoint(queries.workersFlow))])\n          .then(responses => {\n            const covidData = responses && responses[0] && responses[0].rows;\n            const workersFlowData = responses && responses[1] && responses[1].rows;\n\n            setData({\n                total: formatNumber(covidData[0].total),\n                last_14_days: formatNumber(covidData[0].last_14_days),\n                workersFlow: formatNumber(workersFlowData[0].workers)\n            });\n          })\n          .catch((error) => {\n            console.log(error)\n          });\n    };\n\n    React.useEffect(() => {\n        manageData();\n        mapObject.on('moveend', manageData);\n\n        return () => mapObject.off('moveend', manageData);\n    }, [mapObject]);\n\n    return (\n        <div className=\"sidebar\">\n            <div className=\"sidebar__indicator\">\n                <h1>{data.total}</h1>\n                <h3>Infected. Total</h3>\n            </div>\n            <div className=\"sidebar__indicator\">\n                <h1>{data.last_14_days}</h1>\n                <h3>Infected. Last 14 days</h3>\n            </div>\n            <div className=\"sidebar__indicator\">\n                <h1>{data.workersFlow}</h1>\n                <h3>Workers flow</h3>\n            </div>\n        </div>\n    );\n};\n\nexport { Sidebar };\n","import React from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport ReactMapGL from 'react-map-gl';\nimport DeckGL from '@deck.gl/react';\nimport { useCartoTiles } from '../layers/Hooks/useCartoTiles';\nimport { MVTLayer } from '@deck.gl/geo-layers';\nimport { scaleThreshold } from 'd3-scale';\nimport { Sidebar } from '../components';\n\nconst MAPBOX_TOKEN = 'pk.eyJ1IjoiZG90Z2lzIiwiYSI6ImNqd3Z6amtjMTBjOTA0OW84ZjVvYzF6bjQifQ.LIbUaYq3GaiWTzsBV6YnTA';\n\nconst mapStyle = 'https://basemaps.cartocdn.com/gl/dark-matter-gl-style/style.json';\n\nconst checkBrowserSupport = () => {\n  if (!mapboxgl.supported()) {\n    // eslint-disable-next-line\n    alert('Tu navegador no soporta Mapbox GL JS.');\n    return false;\n  }\n  return true;\n};\n\nconst COLOR_SCALE = scaleThreshold()\n  .domain([0, 100, 500, 1000, 1500, Number.MAX_SAFE_INTEGER])\n  .range([\n    [1, 152, 189, 150],\n    [73, 227, 206, 150],\n    [216, 254, 181, 150],\n    [254, 237, 177, 150],\n    [254, 173, 84, 150],\n    [209, 55, 78, 255] \n]);\n\nconst LINE_COLOR_SCALE = scaleThreshold()\n  .domain([0, 100, 250, 500, 1000, Number.MAX_SAFE_INTEGER])\n  .range([\n    [255, 255, 255, 5],\n    [255, 255, 255, 10],\n    [255, 255, 255, 25],\n    [255, 255, 255, 50],\n    [255, 255, 255, 100],\n    [255, 255, 255, 255]\n]);\n\nconst LINE_WIDTH = scaleThreshold()\n  .domain([0, 100, 10000, 100000, 500000, Number.MAX_SAFE_INTEGER])\n  .range([\n    10,\n    50,\n    200,\n    500\n]);\n\nconst MapboxMap = () => {\n  const mapObject = React.useRef();\n  const [viewState, setViewState] = React.useState({\n    latitude: 40.51731304944695,\n    longitude: -3.726903525949845,\n    zoom: 7.94,\n    maxZoom: 16,\n    pitch: 0,\n    bearing: 0\n  });\n  const [hoveredObject, setHovered] = React.useState({});\n  const [layersConfig] = useCartoTiles();\n\n  const onViewStateChange = ({ viewState }) => {\n    setViewState({ ...viewState });\n  }\n\n  const formatNumber = value => new Intl.NumberFormat('es').format(value);\n\n  const renderTooltip = () => {\n    const {x, y, hoveredFeature, field, label} = hoveredObject;\n\n    return (\n      hoveredFeature && (\n        <div className=\"tooltip\" style={{left: x, top: y}}>\n          {`${formatNumber(hoveredFeature.properties[field])} ${label}`}\n        </div>\n      )\n    );\n  };\n\n  const onHover = ({x, y, object, field, label}) => {\n    setHovered({x, y, hoveredFeature: object, field, label});\n  };\n\n  const tileLayers = config => {\n    return Object.values(config).map((layer, index) => (\n        new MVTLayer({\n          id: index,\n          data: layer.tiles[0],\n          minZoom: 0,\n          maxZoom: 23,\n          lineWidthMinPixels: 0.5,\n          pickable: true,\n          autoHighlight: true,\n          highlightColor: [153, 255, 204],\n          onHover: ({x, y, object}) => onHover({x, y, object, ...(layer.type === 'polygon' ? { field: 'total', label: 'infected' } : { field: 'workers', label: 'workers' })}),\n          ...(layer.type === 'line' && { getLineWidth: f => LINE_WIDTH(f.properties.workers), getLineColor: f => LINE_COLOR_SCALE(f.properties.workers), lineJointRounded: true }),\n          ...(layer.type === 'polygon' && { getFillColor: f => COLOR_SCALE(f.properties.total) })\n      })\n    ));\n  };\n\n  return (\n    <>\n      {checkBrowserSupport() && layersConfig && (\n        <>\n          <DeckGL\n            layers={tileLayers(layersConfig)}\n            viewState={viewState}\n            onViewStateChange={onViewStateChange}\n            controller={true}\n          >\n            <ReactMapGL\n              reuseMaps\n              mapStyle={mapStyle}\n              preventStyleDiffing={true}\n              mapboxApiAccessToken={MAPBOX_TOKEN}\n              ref={mapObject}\n            />\n            {renderTooltip()}\n          </DeckGL>\n          {mapObject.current && <Sidebar mapObject={mapObject.current.getMap()} /> }\n        </>\n      )}\n    </>\n  );\n};\n\nexport default MapboxMap;\n\n/* Deck\n  [1, 152, 189, 150],\n  [73, 227, 206, 150],\n  [216, 254, 181, 150],\n  [254, 237, 177, 150],\n  [254, 173, 84, 150],\n  [209, 55, 78, 255] */\n\n/* SunsetDark\n  [252, 222, 156, 200],\n  [250, 164, 118, 200],\n  [240, 116, 110, 200],\n  [227, 79, 111, 200],\n  [220, 57, 119, 200],\n  [185, 37, 122, 200],\n  [124, 29, 111, 200] */\n\n/* Burg\n  [255, 198, 196, 255],\n  [244, 163, 168, 255],\n  [227, 129, 145, 255],\n  [204, 96, 125, 255],\n  [173, 70, 108, 255],\n  [139, 48, 88, 255],\n  [103, 32, 68, 255] */\n\n/* Mint\n  [228, 241, 225, 255],\n  [180, 217, 204, 255],\n  [137, 192, 182, 255],\n  [99, 166, 160, 255],\n  [68, 140, 138, 255],\n  [40, 114, 116, 255],\n  [13, 88, 95, 255] */\n","import React, { useState } from 'react';\nimport CartoMVTRequest from '../Classes/CartoMVTRequest';\nimport QUERY from '../Config/queries';\nimport CONFIG from '../Config/config';\n\nfunction useCartoTiles() {\n  const [layersConfig, setLayers] = useState(null);\n\n  const getTiles = async () => {\n      \n    const infected = new CartoMVTRequest({\n      cartoAccount: CONFIG.dotgisUser,\n      cartoMapsKey: CONFIG.mapsKey,\n      id: CONFIG.infecetedSourceLayer,\n      sql: QUERY.infected\n    });\n\n    const workers = new CartoMVTRequest({\n      cartoAccount: CONFIG.dotgisUser,\n      cartoMapsKey: CONFIG.mapsKey,\n      id: CONFIG.workersSourceLayer,\n      sql: QUERY.workers\n    });\n\n    Promise.all([\n      infected.getTiles(),\n      workers.getTiles()\n    ]).then(response => {\n      setLayers({\n        infected_source: {\n          tiles: response[0],\n          type: 'polygon'\n        },\n        workers_source: {\n          tiles: response[1],\n          type: 'line'\n        }\n      });\n    });\n  };\n\n  React.useEffect(() => {\n    getTiles();\n  }, []);\n\n  return [layersConfig];\n}\n\nexport { useCartoTiles };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './map';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}